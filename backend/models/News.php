<?php

namespace backend\models;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%news}}".
 *
 * @property int $id
 * @property int|null $category_id
 * @property string $slug
 * @property string $title
 * @property string $description
 * @property int $enabled
 *
 * @property Category $category
 * @property TagToNews[] $tagToNews
 * @property Tag[] $tags
 */
class News extends \yii\db\ActiveRecord
{
    public $formTags = [];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%news}}';
    }

    /**
     * {@inheritDoc}
     */
    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::class,
                'attribute' => 'title',
                'slugAttribute' => 'slug'
            ]
        ];
    }

    public function afterFind()
    {
        parent::afterFind();

        $this->formTags = ArrayHelper::getColumn($this->tags, 'title');
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $this->saveTags();
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['enabled', 'default', 'value' => 0],

            [['slug', 'title', 'description'], 'required'],

            [['category_id'], 'integer'],

            [['enabled'], 'boolean'],

            [['description'], 'string'],

            [['title'], 'string', 'max' => 255],

            [['slug'], 'unique'],

            [['category_id'], 'exist',
                'skipOnError' => true, 'targetClass' => Category::class,
                'targetAttribute' =>
                    ['category_id' => 'id'],
                'message' => 'This category not exists!'
            ],

            ['formTags', 'filter', 'filter' => function ($value) {
                return !empty($value) ? ArrayHelper::toArray($value) : [];
            }]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'category_id' => Yii::t('app', 'Category ID'),
            'slug' => Yii::t('app', 'Slug'),
            'title' => Yii::t('app', 'Title'),
            'description' => Yii::t('app', 'Description'),
            'enabled' => Yii::t('app', 'Enabled'),
        ];
    }

    /**
     * Gets query for [[Category]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    /**
     * Gets query for [[TagToNews]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTagToNews()
    {
        return $this->hasMany(TagToNews::class, ['news_id' => 'id']);
    }

    /**
     * Gets query for [[Tags]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])->viaTable('{{%tag_to_news}}', ['news_id' => 'id']);
    }

    /**
     * @param bool $runValidation
     * @param null $attributeNames
     * @return bool
     * @throws \Exception
     */
    public function save($runValidation = true, $attributeNames = null)
    {
        $transaction = Yii::$app->db->beginTransaction();

        try {
            if (! parent::save($runValidation, $attributeNames)) {
                return false;
            }

            if (! $this->saveTags()) {
                return false;
            }

            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();

            throw $e;
        }

        return true;
    }


    private function saveTags()
    {
        $this->unlinkAll('tagToNews', true);

        foreach ($this->formTags as $tagTitle) {
            $tag = Tag::findOne(['title' => $tagTitle]);

            if ($tag === null) {
                $tag = new Tag();
                $tag->title = $tagTitle;
                $tag->save();
            }

            $this->link('tags', $tag);
        }
    }
}
